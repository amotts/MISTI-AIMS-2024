#! /usr/bin/env python3

"""
ROS node to simulate the depth sensor data. 
Reads ground profile from CSV file and interpolates points assuming constant x_velocity a specified in parameters.
Uses the mavros published vehicle altitude as the pressure depth. Calculates the ping depth as the subtraction of that from the interpolated ground
Starts running when vehicle is in OFFBOARD or GUIDED and armed (and takeoff for ArduPilot). Publishes at hz rate specified
"""

import rospy
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from std_msgs.msg import Float64, Float32
from geometry_msgs.msg import PoseStamped
from mavros_msgs.msg import State
from sensor_msgs.msg import Range

PING_DEPTH_TOPIC = "/feedback_loop/ping_depth"
PRESSURE_DEPTH_TOPIC = "/feedback_loop/pressure_depth"

class GroundSimulator:
    def __init__(self, csv_file, speed):
        # Get parameters, read CSV file, and create appropriate class variables
        self.df = pd.read_csv(csv_file)
        self.speed = speed
        self.start_time = rospy.Time.now().to_sec()

        self.pub_rate = rospy.get_param('pub_rate', 3.0)
        self.rate = rospy.Rate(self.pub_rate)

        self.positions = self.df['cumulative_distance'].values
        self.depths = self.df['total depth'].values

        # Initialize publishers for pressure depth and ping depth
        self.pressure_depth_pub = rospy.Publisher(PRESSURE_DEPTH_TOPIC, Float32, queue_size=10) 
        self.ping_depth_pub = rospy.Publisher(PING_DEPTH_TOPIC, Float64, queue_size=10)
        
        # Subscribe to mavros local pose and current setpooint (for visualizer purposes)
        rospy.Subscriber('/mavros/local_position/pose', PoseStamped , self.pose_callback)
        rospy.Subscriber('/mavros/setpoint_position/local', PoseStamped , self.setpoint_callback)
        
        # Various variables
        self.current_ping_depth = 0
        self.current_vehicle_depth = 0
        self.current_setpoint = 0
        self.vehicle_hx = [[],[]]
        self.setpoint_hx = []

        # Prepare the plot to be animated
        plt.ion()
        self.fig, self.ax = plt.subplots()
        self.line, = self.ax.plot(self.positions, self.depths, 'b-')
        self.path, = self.ax.plot([],[], 'r-', label='Flight Path')
        self.vehicle_marker, = self.ax.plot([], [], 'ro', markersize=10)
        self.setpoints, = self.ax.plot([],[], 'k-', label="Setpoints")
        self.ax.set_xlabel('Distance')
        self.ax.set_ylabel('Depth')
        self.ax.set_title('Vehicle Simulation')
        self.ax.legend()

        # Trigger action on window closure
        self.fig.canvas.mpl_connect('close_event', self.on_close)
        
    def interpolate_depth(self, position):
        # Interpolate and return a depth at the vehicle position
        return np.interp(position, self.positions, self.depths)
    
    def setpoint_callback(self, msg):
        # save the setpoint as a class variable
        self.current_setpoint = msg.pose.position.z

    def pose_callback(self, msg):
        # Get the current position of the vehicle and save the altitude and setpoint
        current_time = rospy.Time.now().to_sec()
        elapsed_time = current_time - self.start_time
        current_position = self.speed * elapsed_time
        self.current_vehicle_depth = msg.pose.position.z

        self.vehicle_hx[0].append(current_position)
        self.vehicle_hx[1].append(self.current_vehicle_depth)
        self.setpoint_hx.append(self.current_setpoint)


    def update_plot(self, frame):
        # Run the simulation and update plot. 
        current_time = rospy.Time.now().to_sec()
        elapsed_time = current_time - self.start_time
        current_position = self.speed * elapsed_time
        self.current_ping_depth = self.current_vehicle_depth - self.interpolate_depth(current_position)
        
        # Publish current depth values
        self.ping_depth_pub.publish(self.current_ping_depth)
        self.pressure_depth_pub.publish(self.current_vehicle_depth)
        
        # Set data and update the animated plot
        self.vehicle_marker.set_data([current_position], [self.current_vehicle_depth])
        self.path.set_data(self.vehicle_hx)
        self.setpoints.set_data(self.vehicle_hx[0], self.setpoint_hx)
        self.ax.relim()
        self.ax.autoscale_view()
        self.fig.canvas.draw()
        self.rate.sleep()

    def on_close(self, event):
        # Shutdown ROS on window closure
        rospy.signal_shutdown("Plot window closed")

    def run(self):
        ani = FuncAnimation(self.fig, self.update_plot, interval=1.0/10.0)
        plt.show(block=True)

current_state = State()
run_sim = False
g_alt = 0

autopilot = rospy.get_param("autopilot", "PX4")
csv_file = rospy.get_param('csv_file')
speed = rospy.get_param('speed')

def global_pose_callback(msg):
    # Save pose as a global variable 
    global g_alt
    g_alt = msg.pose.position.z


 # Slightly janky method to not start simulator and depth publishing until vehicle is in correct state for the given autopilot
def state_cb(msg):
    if autopilot == "ArduPilot" and msg.mode == 'GUIDED' and msg.armed and g_alt > 0.1:
        simulator = GroundSimulator(csv_file, speed)
        simulator.run()
    if autopilot == "PX4" and msg.mode == 'OFFBOARD' and msg.armed:
        simulator = GroundSimulator(csv_file, speed)
        simulator.run()

def start_on_offboard():
    rospy.init_node('ground_simulator')
    state_sub = rospy.Subscriber("mavros/state", State, callback = state_cb)
    rospy.spin()

rospy.Subscriber('/mavros/local_position/pose', PoseStamped , global_pose_callback)

if __name__ == '__main__':
    try:
        start_on_offboard()
    except rospy.ROSInterruptException:
        pass
